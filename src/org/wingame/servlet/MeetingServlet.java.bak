package org.wingame.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.util.HtmlUtils;
import org.wingame.model.Meeting;
import org.wingame.util.MeetingUtil;

public class MeetingServlet extends HttpServlet {

	/**
	 * The doGet method of the servlet. <br>
	 *
	 * This method is called when a form has its tag value method equals to get.
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		response.sendRedirect(request.getContextPath() + "/meeting/edit.jsp");
	}

	/**
	 * The doPost method of the servlet. <br>
	 *
	 * This method is called when a form has its tag value method equals to post.
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("UTF-8");
		int id = Integer.parseInt(request.getParameter("id"));
		String title = HtmlUtils.htmlEscape((String)request.getParameter("title"));
		String address =  HtmlUtils.htmlEscape((String)request.getParameter("address"));
		Timestamp datetime,deadline;
		double fee;
		try{
			int m_year,m_month,m_day,m_hour,m_min,d_year,d_month,d_day;
			m_year = Integer.parseInt(request.getParameter("m_year"));
			m_month = Integer.parseInt(request.getParameter("m_month"));
			m_day = Integer.parseInt(request.getParameter("m_day"));
			m_hour = Integer.parseInt(request.getParameter("m_hour"));
			m_min = Integer.parseInt(request.getParameter("m_min"));
			d_year = Integer.parseInt(request.getParameter("d_year"));
			d_month = Integer.parseInt(request.getParameter("d_month"));
			d_day = Integer.parseInt(request.getParameter("d_day"));
			fee = Double.parseDouble(request.getParameter("fee"));
			datetime = createTime(m_year,m_month,m_day,m_hour,m_min);
			deadline = createTime(d_year,d_month,d_day,0,0);
		}catch(NumberFormatException e){
			showMessage(request,response,"在日期时间和费用文本框中输入了非数字字符。");
			return;
		}catch (ParseException e) {
			showMessage(request,response,"输入的日期不正确。");
			return;
		}
		Meeting meeting = new Meeting(id,title,address,datetime,fee,deadline);
		MeetingUtil util = new MeetingUtil();
		boolean retValue = util.addOrUpdate(meeting);
		if(retValue){
			if(id == -1) success(request,response,"添加新会议成功！");
			else success(request,response,"修改成功！");
		}else{
			showMessage(request,response,"数据库出现异常");
		}
	}

	private void showMessage(HttpServletRequest request,HttpServletResponse response, String message) throws IOException, ServletException{
		response.setHeader("Content-type", "text/html;charset=UTF-8"); 
		PrintWriter out = response.getWriter();
		out.print("<script>alert('"+message+"')</script>");
		out.print("<script>window.history.back()</script>");
	}
	
	private void success(HttpServletRequest request,HttpServletResponse response, String message) throws IOException, ServletException{
		response.setHeader("Content-type", "text/html;charset=UTF-8"); 
		PrintWriter out = response.getWriter();
		out.print("<script>alert('"+message+"')</script>");
		out.print("<script>window.location.href='"+request.getContextPath()+"/meeting/'</script>");
	}
	
	private Timestamp createTime(int year,int month,int day,int hour,int minute) throws ParseException
	{
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm");
		df.setLenient(false);
		String str = year + "-" + month + "-" + day + "-" + hour + "-" + minute;
		return new Timestamp(df.parse(str).getTime());
	}
}
